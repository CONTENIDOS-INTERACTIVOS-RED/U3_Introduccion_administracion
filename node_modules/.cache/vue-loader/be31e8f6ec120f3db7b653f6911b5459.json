{"remainingRequest":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/src/views/curso/Tema2.vue?vue&type=template&id=40bbe786&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/src/views/curso/Tema2.vue","mtime":1736988553359},{"path":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Introduccion_administracion/U3_Introduccion_administracion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}